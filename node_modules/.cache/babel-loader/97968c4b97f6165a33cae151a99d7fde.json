{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\13129\\\\Desktop\\\\Applcation design\\\\react-quiz-game\\\\src\\\\quiz\\\\game.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport EndScreen from \"./end-screen\";\nimport Stats from \"./stats\";\nimport TriviaItem from \"./trvia-item\";\nimport triviaData from \"./trivia-data\";\n/*\r\nThe game is responsible for orchestrating\r\nthe flow of the quiz game.\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const [gameState, SetGameState] = useState({\n    score: 0,\n    triviaIndex: 0,\n    isGameOver: false\n  });\n  const {\n    score,\n    triviaIndex,\n    isGameOver\n  } = gameState;\n  const questionNumber = triviaIndex + 1;\n  const numQuestions = triviaData.length;\n  const diffY = '${difficulty}';\n\n  const restartGame = () => {\n    SetGameState({\n      score: 0,\n      triviaIndex: 0,\n      IsGameOver: false\n    });\n  };\n\n  const loadNextQuestion = () => {\n    if (triviaIndex >= triviaData.length - 1) {\n      SetGameState({ ...gameState,\n        isGameOver: true\n      });\n    } else {\n      SetGameState({ ...gameState,\n        triviaIndex: triviaIndex + 1\n      });\n    }\n  };\n\n  const onAnswerSelected = wasPlayerCorrect => {\n    if (wasPlayerCorrect) {\n      SetGameState({ ...gameState,\n        score: score + 1\n      });\n    }\n  };\n\n  let pageContent;\n\n  if (isGameOver) {\n    pageContent = /*#__PURE__*/_jsxDEV(EndScreen, {\n      score: score,\n      bestScore: 0,\n      onRetryClick: restartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  } else {\n    const triviaQuestion = triviaData[triviaIndex];\n    const {\n      correct_answer,\n      incorrect_answers,\n      question\n    } = triviaQuestion;\n    pageContent = /*#__PURE__*/_jsxDEV(TriviaItem, {\n      difficulty: diffY,\n      question: question,\n      correctAnswer: correct_answer,\n      incorrectAnswers: incorrect_answers,\n      onNextClick: loadNextQuestion,\n      onAnswerSelected: onAnswerSelected\n    }, triviaIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Stats, {\n      score: score,\n      QuestionNumber: questionNumber,\n      totalQuestions: numQuestions,\n      difficulty: diffY\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), pageContent]\n  }, void 0, true);\n}\n\n_s(Game, \"B2LV7R3Gz/YX06JpqN8HZhtwblI=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/13129/Desktop/Applcation design/react-quiz-game/src/quiz/game.js"],"names":["useState","EndScreen","Stats","TriviaItem","triviaData","Game","gameState","SetGameState","score","triviaIndex","isGameOver","questionNumber","numQuestions","length","diffY","restartGame","IsGameOver","loadNextQuestion","onAnswerSelected","wasPlayerCorrect","pageContent","triviaQuestion","correct_answer","incorrect_answers","question"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA;AACA;AACA;AACA;;;;;AACA,SAASC,IAAT,GAAgB;AAAA;;AACd,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC;AACzCQ,IAAAA,KAAK,EAAE,CADkC;AAEzCC,IAAAA,WAAW,EAAE,CAF4B;AAGzCC,IAAAA,UAAU,EAAE;AAH6B,GAAD,CAA1C;AAMA,QAAM;AAAEF,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,MAAqCJ,SAA3C;AACA,QAAMK,cAAc,GAAGF,WAAW,GAAG,CAArC;AACA,QAAMG,YAAY,GAAGR,UAAU,CAACS,MAAhC;AACA,QAAMC,KAAK,GAAE,eAAb;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACxBR,IAAAA,YAAY,CAAC;AACXC,MAAAA,KAAK,EAAE,CADI;AAEXC,MAAAA,WAAW,EAAE,CAFF;AAGXO,MAAAA,UAAU,EAAE;AAHD,KAAD,CAAZ;AAKD,GAND;;AAQA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAIR,WAAW,IAAIL,UAAU,CAACS,MAAX,GAAoB,CAAvC,EAA0C;AACxCN,MAAAA,YAAY,CAAC,EAAE,GAAGD,SAAL;AAAgBI,QAAAA,UAAU,EAAE;AAA5B,OAAD,CAAZ;AACD,KAFD,MAEO;AACLH,MAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXG,QAAAA,WAAW,EAAEA,WAAW,GAAG;AAFhB,OAAD,CAAZ;AAID;AACF,GATD;;AAWA,QAAMS,gBAAgB,GAAIC,gBAAD,IAAsB;AAC7C,QAAIA,gBAAJ,EAAsB;AACpBZ,MAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXE,QAAAA,KAAK,EAAEA,KAAK,GAAG;AAFJ,OAAD,CAAZ;AAID;AACF,GAPD;;AASA,MAAIY,WAAJ;;AACA,MAAIV,UAAJ,EAAgB;AACdU,IAAAA,WAAW,gBACT,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEZ,KAAlB;AAAyB,MAAA,SAAS,EAAE,CAApC;AAAuC,MAAA,YAAY,EAAEO;AAArD;AAAA;AAAA;AAAA;AAAA,YADF;AAGD,GAJD,MAIO;AACL,UAAMM,cAAc,GAAGjB,UAAU,CAACK,WAAD,CAAjC;AACA,UAAM;AAAEa,MAAAA,cAAF;AAAkBC,MAAAA,iBAAlB;AAAqCC,MAAAA;AAArC,QAAiDH,cAAvD;AACAD,IAAAA,WAAW,gBACT,QAAC,UAAD;AAEE,MAAA,UAAU,EAAIN,KAFhB;AAGE,MAAA,QAAQ,EAAEU,QAHZ;AAIE,MAAA,aAAa,EAAEF,cAJjB;AAKE,MAAA,gBAAgB,EAAEC,iBALpB;AAME,MAAA,WAAW,EAAEN,gBANf;AAOE,MAAA,gBAAgB,EAAEC;AAPpB,OACOT,WADP;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAED,sBACE;AAAA,4BACE,QAAC,KAAD;AACE,MAAA,KAAK,EAAED,KADT;AAEE,MAAA,cAAc,EAAEG,cAFlB;AAGE,MAAA,cAAc,EAAEC,YAHlB;AAIE,MAAA,UAAU,EAAIE;AAJhB;AAAA;AAAA;AAAA;AAAA,YADF,EAOGM,WAPH;AAAA,kBADF;AAWD;;GAxEQf,I;;KAAAA,I;AA0ET,eAAeA,IAAf","sourcesContent":["import { useState } from \"react\";\r\nimport EndScreen from \"./end-screen\";\r\nimport Stats from \"./stats\";\r\nimport TriviaItem from \"./trvia-item\";\r\nimport triviaData from \"./trivia-data\";\r\n\r\n/*\r\nThe game is responsible for orchestrating\r\nthe flow of the quiz game.\r\n*/\r\nfunction Game() {\r\n  const [gameState, SetGameState] = useState({\r\n    score: 0,\r\n    triviaIndex: 0,\r\n    isGameOver: false,\r\n  });\r\n\r\n  const { score, triviaIndex, isGameOver } = gameState;\r\n  const questionNumber = triviaIndex + 1;\r\n  const numQuestions = triviaData.length;\r\n  const diffY= '${difficulty}';\r\n\r\n  const restartGame = () => {\r\n    SetGameState({\r\n      score: 0,\r\n      triviaIndex: 0,\r\n      IsGameOver: false,\r\n    });\r\n  };\r\n\r\n  const loadNextQuestion = () => {\r\n    if (triviaIndex >= triviaData.length - 1) {\r\n      SetGameState({ ...gameState, isGameOver: true });\r\n    } else {\r\n      SetGameState({\r\n        ...gameState,\r\n        triviaIndex: triviaIndex + 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  const onAnswerSelected = (wasPlayerCorrect) => {\r\n    if (wasPlayerCorrect) {\r\n      SetGameState({\r\n        ...gameState,\r\n        score: score + 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  let pageContent;\r\n  if (isGameOver) {\r\n    pageContent = (\r\n      <EndScreen score={score} bestScore={0} onRetryClick={restartGame} />\r\n    );\r\n  } else {\r\n    const triviaQuestion = triviaData[triviaIndex];\r\n    const { correct_answer, incorrect_answers, question} = triviaQuestion;\r\n    pageContent = (\r\n      <TriviaItem\r\n        key={triviaIndex}\r\n        difficulty = {diffY}\r\n        question={question}\r\n        correctAnswer={correct_answer}\r\n        incorrectAnswers={incorrect_answers}\r\n        onNextClick={loadNextQuestion}\r\n        onAnswerSelected={onAnswerSelected}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Stats\r\n        score={score}\r\n        QuestionNumber={questionNumber}\r\n        totalQuestions={numQuestions}\r\n        difficulty = {diffY}\r\n      />\r\n      {pageContent}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}